whs$Region[whs$country=="South Sudan",] <- "AFRO"
whs$Region[whs$country=="South Sudan"] <- "AFRO"
source('gpwvectors.R', local = TRUE)
gpw_cols <- c(c("country", "year", "iso3", "Region", "pop"), gpw_ind)
whs <- whs[, gpw_cols]
for (var in 1:length(gpw_ind)) {
if ((!is.na(whs[[gpw_ind[var]]])) | (whs[[gpw_ind[var]]] != "transfats")) {
whs[, gpw_ind[var]] <- as.double(whs[, gpw_ind[var]])
whs[, gpw_ind[var]] <- round(whs[, gpw_ind[var]], 2)
}
}
for (var in 1:length(gpw_ind)) {
if ((!is.null(whs[[gpw_ind[var]]])) | (whs[[gpw_ind[var]]] != "transfats")) {
whs[, gpw_ind[var]] <- as.double(whs[, gpw_ind[var]])
whs[, gpw_ind[var]] <- round(whs[, gpw_ind[var]], 2)
}
}
View(whs)
setwd("/Users/amitprasad/gpw13-dashboard/database")
write.csv(whs, "gpw.csv", row.names=FALSE)
runApp('~/gpw13-dashboard/gpw13-data')
deployApp()
getwd()
setwd("/Users/amitprasad/gpw13-dashboard/gpw13-data")
runApp()
deployApp()
rm(list=ls())
setwd("/Users/amitprasad/gpw13-dashboard/healthsdg")
options(digits = 4)
library(dplyr)
whs <- read.csv("data/sdg8.csv", header = TRUE)
whs <- whs %>% filter(country != "World") %>% droplevels()
whs$Region[whs$country=="South Sudan"] <- "AFRO"
source('gpwvectors.R', local = TRUE)
gpw_cols <- c(c("Country", "Year", "ISO3", "Region", "Population"), gpw_ind)
whs <- whs[, gpw_cols]
for (var in 1:length(gpw_ind)) {
if ((!is.null(whs[[gpw_ind[var]]])) | (whs[[gpw_ind[var]]] != "transfats")) {
whs[, gpw_ind[var]] <- as.double(whs[, gpw_ind[var]])
whs[, gpw_ind[var]] <- round(whs[, gpw_ind[var]], 2)
}
}
setwd("/Users/amitprasad/gpw13-dashboard/database")
write.csv(whs, "gpw.csv", row.names=FALSE)
View(whs)
for (col in common_cols) {}
rm(list=ls())
setwd("/Users/amitprasad/gpw13-dashboard/healthsdg")
options(digits = 4)
library(dplyr)
whs <- read.csv("data/sdg8.csv", header = TRUE)
whs <- whs %>% filter(country != "World") %>% droplevels()
whs$Region[whs$country=="South Sudan"] <- "AFRO"
source('gpwvectors.R', local = TRUE)
common_cols <- c("country", "year", "iso3", "Region", "pop")
new_common_cols <- c("Country", "Year", "ISO3", "Region", "Pop")
gpw_cols <- c(common_cols, gpw_ind)
whs <- whs[, gpw_cols]
for (col in 1:length(common_cols)) {
names(whs)[names(whs) == common_cols[col]] <- new_common_cols[col]
}
View(whs)
rm(list=ls())
setwd("/Users/amitprasad/gpw13-dashboard/healthsdg")
options(digits = 4)
library(dplyr)
whs <- read.csv("data/sdg8.csv", header = TRUE)
whs <- whs %>% filter(country != "World") %>% droplevels()
whs$Region[whs$country=="South Sudan"] <- "AFRO"
source('gpwvectors.R', local = TRUE)
common_cols <- c("country", "year", "iso3", "Region", "pop")
new_common_cols <- c("Country", "Year", "ISO3", "Region", "Pop")
gpw_cols <- c(common_cols, gpw_ind)
whs <- whs[, gpw_cols]
for (col in 1:length(common_cols)) {
names(whs)[names(whs) == common_cols[col]] <- new_common_cols[col]
}
for (var in 1:length(gpw_ind)) {
if ((!is.null(whs[[gpw_ind[var]]])) | (whs[[gpw_ind[var]]] != "transfats")) {
whs[, gpw_ind[var]] <- as.double(whs[, gpw_ind[var]])
whs[, gpw_ind[var]] <- round(whs[, gpw_ind[var]], 2)
}
}
setwd("/Users/amitprasad/gpw13-dashboard/database")
write.csv(whs, "gpw.csv", row.names=FALSE)
runApp('~/gpw13-dashboard/gpw13-data')
View(whs)
View(gpw)
runApp('~/gpw13-dashboard/gpw13-data')
runApp('~/gpw13-dashboard/gpw13-data')
deployApp()
getwd()
setwd("/Users/amitprasad/gpw13-dashboard/gpw13-data")
deployApp()
runApp()
runApp()
runApp()
deployApp()
runApp()
deployApp()
getwd()
runApp()
deployApp()
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
runApp('~/Documents/R/healthsdg')
rm(list=ls())
setwd("/Users/amitprasad/gpw13-dashboard/healthsdg")
options(digits = 4)
library(dplyr)
whs <- read.csv("data/sdg8.csv", header = TRUE)
whs <- whs %>% filter(country != "World") %>% droplevels()
whs$Region[whs$country=="South Sudan"] <- "AFRO"
source('gpwvectors.R', local = TRUE)
common_cols <- c("country", "year", "iso3", "Region", "pop")
new_common_cols <- c("Country", "Year", "ISO3", "Region", "Pop")
gpw_cols <- c(common_cols, gpw_ind, c("hale", "hale_m", "hale_f"))
whs <- whs[, gpw_cols]
for (col in 1:length(common_cols)) {
names(whs)[names(whs) == common_cols[col]] <- new_common_cols[col]
}
for (var in 1:length(gpw_ind)) {
if ((!is.null(whs[[gpw_ind[var]]])) | (whs[[gpw_ind[var]]] != "transfats")) {
whs[, gpw_ind[var]] <- as.double(whs[, gpw_ind[var]])
whs[, gpw_ind[var]] <- round(whs[, gpw_ind[var]], 2)
}
}
setwd("/Users/amitprasad/gpw13-dashboard/database")
write.csv(whs, "gpw-hale.csv", row.names=FALSE)
rm(list=ls())
setwd("/Users/amitprasad/gpw13-dashboard/healthsdg")
options(digits = 4)
library(dplyr)
whs <- read.csv("data/sdg8.csv", header = TRUE)
whs <- whs %>% filter(country != "World") %>% droplevels()
whs$Region[whs$country=="South Sudan"] <- "AFRO"
source('gpwvectors.R', local = TRUE)
common_cols <- c("country", "year", "iso3", "Region", "pop")
new_common_cols <- c("Country", "Year", "ISO3", "Region", "Pop")
gpw_cols <- c(common_cols, gpw_ind)
whs <- whs[, gpw_cols]
for (col in 1:length(common_cols)) {
names(whs)[names(whs) == common_cols[col]] <- new_common_cols[col]
}
for (var in 1:length(gpw_ind)) {
if ((!is.null(whs[[gpw_ind[var]]])) | (whs[[gpw_ind[var]]] != "transfats")) {
whs[, gpw_ind[var]] <- as.double(whs[, gpw_ind[var]])
whs[, gpw_ind[var]] <- round(whs[, gpw_ind[var]], 2)
}
}
setwd("/Users/amitprasad/gpw13-dashboard/database")
write.csv(whs, "gpw-hale.csv", row.names=FALSE)
rm(list=ls())
setwd("/Users/amitprasad/gpw13-dashboard/healthsdg")
options(digits = 4)
library(dplyr)
whs <- read.csv("data/sdg8.csv", header = TRUE)
whs <- whs %>% filter(country != "World") %>% droplevels()
whs$Region[whs$country=="South Sudan"] <- "AFRO"
source('gpwvectors.R', local = TRUE)
rm(list=ls())
setwd("/Users/amitprasad/gpw13-dashboard/healthsdg")
options(digits = 4)
library(dplyr)
whs <- read.csv("data/sdg8.csv", header = TRUE)
whs <- whs %>% filter(country != "World") %>% droplevels()
whs$Region[whs$country=="South Sudan"] <- "AFRO"
source('gpwvectors.R', local = TRUE)
common_cols <- c("country", "year", "iso3", "Region", "pop")
new_common_cols <- c("Country", "Year", "ISO3", "Region", "Pop")
hale_cols <- c("hale", "halem", "halef")
gpw_cols <- c(common_cols, gpw_ind, hale_cols)
whs <- whs[, gpw_cols]
for (col in 1:length(common_cols)) {
names(whs)[names(whs) == common_cols[col]] <- new_common_cols[col]
}
for (var in 1:length(gpw_ind)) {
if ((!is.null(whs[[gpw_ind[var]]])) | (whs[[gpw_ind[var]]] != "transfats")) {
whs[, gpw_ind[var]] <- as.double(whs[, gpw_ind[var]])
whs[, gpw_ind[var]] <- round(whs[, gpw_ind[var]], 2)
}
}
setwd("/Users/amitprasad/gpw13-dashboard/database")
write.csv(whs, "gpw-hale.csv", row.names=FALSE)
runApp('~/gpw13-dashboard/gpw13-analytics')
getwd()
setwd("/Users/amitprasad/gpw13-dashboard/database")
setwd("/Users/amitprasad/gpw13-dashboard/gpw13-analytics")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rlang::last_error()
summary(whs$hale)
summary(whs$u5mr)
gpw <- read.csv("data/gpw-hale.csv", header = TRUE)
summary(gpw$u5mr)
runApp()
rlang::last_error()
if (ym == "Latest Available") {
temp <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("Country", "Year", "ISO3", "Region", "tempvar"))
temp[1, ] <- c("Dummy", "2000", "DMY", "CHTI", "100")
for (i in 1:length(unique(whs_map$ISO3))) {
whs_temp <- whs_map %>% filter(ISO3 == unique(whs_map$ISO3)[i])
a <- as.character(whs_temp[["Year"]])
b <- whs_temp[[im()]]
c <- map_latest(a, b)
temp2 <- data.frame("Country" = whs_temp$Country[1],
"ISO3" = whs_temp$ISO3[1],
"Region" = whs_temp$Region[1],
"Year" = c[1],
"tempvar" = c[2])
temp <- rbind(temp, temp2)
}
whs_map <- temp[2:195,]
#whs_map$Year <- as.factor(whs_map$Year)
names(whs_map)[ncol(whs_map)] <- im()
whs_map[[im()]] <- as.numeric(whs_map[[im()]])
} else {
whs_map <- whs_map %>%
filter(Year == input$year_map)
}
whs_map
runApp()
rlang::last_error()
names(gpw)
runApp()
g <- ggplot(df, aes_string(x = "ISO3", y = indic, fill = "Region")) +
geom_bar(stat = "identity", aes(text=sprintf("Year: %s", Year))) +
scale_fill_manual(values=bar_colors(rm()),
drop = FALSE) +
theme(axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 90, size = 7),
panel.background = element_rect(fill = "transparent"),
panel.grid.major = element_blank(),
plot.background = element_rect(fill = "transparent"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
g <- ggplot(df, aes_string(x = "ISO3", y = im(), fill = "Region")) +
geom_bar(stat = "identity", aes(text=sprintf("Year: %s", Year))) +
scale_fill_manual(values=bar_colors(rm()),
drop = FALSE) +
theme(axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 90, size = 5),
panel.background = element_rect(fill = "transparent"),
panel.grid.major = element_blank(),
plot.background = element_rect(fill = "transparent"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
getwd()
rsconnect::setAccountInfo(name='amitprasad', token='B450CF180EE1E7E2B0D92957724D4A92', secret='kOZhBCv1Ad5zopunpKqkqIOoLk/8DnqzY+m5BSNP')
deployApp()
runApp()
runApp()
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
whs_map$Year <- as.factor(whs_map$Year)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/Shiny/gpw13-data')
runApp('~/Documents/Shiny/gpw13-analytics')
runApp('~/Documents/Shiny/gpw13-analytics')
getwd()
setwd("/Users/amitprasad/Documents/Shiny/gpw13-analytics")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
runApp()
whs_map <- temp[2:195,]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- df %>% filter(Region == rm)
runApp()
g <- ggplot(df, aes_string(x = "ISO3", y = im(), fill = "Region")) +
geom_bar(stat = "identity") +
scale_fill_manual(values=bar_colors(rm()),
drop = FALSE) +
labs(title = paste0(indic, " by country using ISO3 code (", input$year_map, ")")) +
theme(plot.title = element_text(family = "Helvetica", size = 12),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 90, size = 5),
panel.background = element_rect(fill = "transparent"),
panel.grid.major = element_blank(),
plot.background = element_rect(fill = "transparent"))
runApp()
runApp()
g <- ggplot(df, aes_string(x = "ISO3", y = im(), fill = "Region")) +
geom_bar(stat = "identity") +
scale_fill_manual(values=bar_colors(rm()),
drop = FALSE) +
labs(title = paste0(indic, " by country using ISO3 code (", ym(), ")")) +
theme(plot.title = element_text(family = "Helvetica", size = 12),
axis.text.y = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 90, size = 5),
panel.background = element_rect(fill = "transparent"),
panel.grid.major = element_blank(),
plot.background = element_rect(fill = "transparent"))
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/gpw13-analytics')
runApp()
runApp()
runApp('~/gpw13-analytics')
getwd()
runApp('~/gpw13-analytics')
runApp()
